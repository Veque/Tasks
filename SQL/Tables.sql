CREATE TABLE dbo.Post (
	Id BIGINT NOT NULL IDENTITY(1,1),
	[Name] VARCHAR(1000) NOT NULL,
	CONSTRAINT PK_Post PRIMARY KEY (
		Id ASC
		)
	)

/*
Я использую эту таблицу, как связующую между статьями и тегами. 
Отдельной таблицы для тегов я не делаю, потому что чаще всего теги отдельно не заводяться.
Они цепляются в полусвободном режиме к статьям. Так же я полагаю, что теги отдельно от статей не существуют. Данная таблица позволяет быстро искать статьи по тегам, без лишнего Index Peek'а.
При поиске всех пар статья-тег (в файле AllPosts.sql) SQL сервер должен (полагаю, что статей и тегов очень много) отсортировать таблицу TagPost по PostId и, выполнив джоин с сортировкой, вернуть результат.
Если была третья таблица, то для каждой строки был бы поиск по ключу. 

Оверхед сортировки не большой (во многом благодаря тому, что размер строки ме=аленький, но его можно уменьшить, сделав Name фиксированного размера). 
Если это не так, то можно добавить еще одну таблицу dbo.PostTag с обратным ключом (PostId,Name). 
Тогда выборка всех пар статья-тег будет быстрее, но будет риск рассинхронизации двух таблиц.
Если сделать одну таблицу с двумя индексами, то сложнее бороться с дедлоками.

Отдельную таблицу для тегов следует делать, если ими требуется управлять отдельно, если они могут существовать не прикрепленными к таблицам.
*/

CREATE TABLE dbo.TagPost (
	PostId BIGINT NOT NULL,
	[Name] VARCHAR(1000) NOT NULL,
	CONSTRAINT PK_TagPost PRIMARY KEY (
		[Name] ASC,
		PostId ASC
		)
	)
